import flet as ft
from catboost import CatBoostRegressor
from CDK_pywrapper import CDK
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from rdkit.Chem.MolStandardize import rdMolStandardize
import pandas as pd
import tempfile
import os
import sys

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CDK –∏ –º–æ–¥–µ–ª–∏ ===
cdk_2 = CDK(ignore_3D=False)
cdk_name = list(pd.read_csv("CDK_DES.csv")['Name'])
model = CatBoostRegressor()
model.load_model("catboost_smiles_model.cbm")

def get_feature_vector(smiles, T, P, Tm, dHvap, rho, dG):
    smiles_list = [smiles, "O"]
    mols = [Chem.AddHs(Chem.MolFromSmiles(s)) for s in smiles_list]
    uncharger = rdMolStandardize.Uncharger()
    mols = [uncharger.uncharge(mol) for mol in mols]
    for mol in mols:
        AllChem.EmbedMolecule(mol, randomSeed=42)
    descriptors = cdk_2.calculate(mols).head(1)
    desc_vector = descriptors.loc[:, cdk_name].values[0].tolist()
    return [T, P, Tm, dHvap, rho, dG] + desc_vector

def main(page: ft.Page):
    page.title = "SC-CO2 Solubility Predictor"
    page.scroll = ft.ScrollMode.AUTO
    page.padding = 30
    page.window_width = 800
    page.window_height = 720

    smiles_field = ft.TextField(label="SMILES (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", expand=True, tooltip="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ SMILES")
    T_field = ft.TextField(label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (K, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", keyboard_type=ft.KeyboardType.NUMBER, tooltip="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö")
    P_field = ft.TextField(label="–î–∞–≤–ª–µ–Ω–∏–µ (bar, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", keyboard_type=ft.KeyboardType.NUMBER, tooltip="–î–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –±–∞—Ä–∞—Ö")
    Tm_field = ft.TextField(label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è (K)", keyboard_type=ft.KeyboardType.NUMBER, tooltip="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–∞")
    dHvap_field = ft.TextField(label="–≠–Ω—Ç–∞–ª—å–ø–∏—è –∏—Å–ø–∞—Ä–µ–Ω–∏—è (–∫–î–∂/–º–æ–ª—å)", keyboard_type=ft.KeyboardType.NUMBER, tooltip="–≠–Ω—Ç–∞–ª—å–ø–∏—è –∏—Å–ø–∞—Ä–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–∞")
    rho_field = ft.TextField(label="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å CO2 (–≥/—Å–º¬≥)", keyboard_type=ft.KeyboardType.NUMBER, tooltip="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å CO2 –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö")
    dG_field = ft.TextField(label="–≠–Ω–µ—Ä–≥–∏—è —Å–æ–ª—å–≤–∞—Ç–∞—Ü–∏–∏ (–∫–î–∂/–º–æ–ª—å)", keyboard_type=ft.KeyboardType.NUMBER, tooltip="–ì–∏–±–±—Å–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è —Å–æ–ª—å–≤–∞—Ç–∞—Ü–∏–∏")

    result = ft.Text("", size=16, selectable=True)
    image = ft.Image(src="", width=250, height=250, visible=False)

    def predict_solubility(e):
        try:
            if not smiles_field.value.strip() or not T_field.value or not P_field.value:
                result.value = "\u274C –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: SMILES, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –î–∞–≤–ª–µ–Ω–∏–µ."
                image.visible = False
            else:
                Tm = float(Tm_field.value) if Tm_field.value else 0.0
                dHvap = float(dHvap_field.value) if dHvap_field.value else 0.0
                rho = float(rho_field.value) if rho_field.value else 0.0
                dG = float(dG_field.value) if dG_field.value else 0.0

                smiles = smiles_field.value.strip()
                vector = get_feature_vector(smiles, float(T_field.value), float(P_field.value), Tm, dHvap, rho, dG)
                log_y2 = model.predict([vector])[0]
                y2 = 10 ** log_y2
                result.value = f"\u2705 log(y‚ÇÇ) = {log_y2:.4f}\n–†–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç—å y‚ÇÇ ‚âà {y2:.5f} –≥/–≥ CO‚ÇÇ"

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–æ–ª–µ–∫—É–ª—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                mol = Chem.MolFromSmiles(smiles)
                img = Draw.MolToImage(mol, size=(300, 300))
                temp_path = os.path.join(tempfile.gettempdir(), "mol.png")
                img.save(temp_path)
                image.src = temp_path
                image.visible = True

        except Exception as ex:
            result.value = f"\u274C –û—à–∏–±–∫–∞: {str(ex)}"
            image.visible = False
        page.update()

    page.add(
        ft.Column([
            ft.Row([
                ft.Text("üß™", size=28),
                ft.Text("SC-CO‚ÇÇ Solubility Predictor", size=26, weight="bold")
            ], alignment=ft.MainAxisAlignment.CENTER),

            ft.Text("–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç—å –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≥—Ä–∞–º–º–∞—Ö –≤–µ—â–µ—Å—Ç–≤–∞ –Ω–∞ –≥—Ä–∞–º–º CO‚ÇÇ (–≥/–≥)", size=14, italic=True, text_align="center"),
            ft.Divider(height=20),

            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", size=18, weight="bold"),
                        ft.ResponsiveRow([
                            ft.Column([smiles_field], col=12),
                            ft.Column([T_field, Tm_field, dHvap_field], col=6),
                            ft.Column([P_field, rho_field, dG_field], col=6),
                        ])
                    ]),
                    bgcolor=ft.colors.BLUE_GREY_50,
                    border_radius=10,
                    padding=20
                )
            ),

            ft.Container(
                content=ft.ElevatedButton("\u2696\ufe0f –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", on_click=predict_solubility, style=ft.ButtonStyle(bgcolor=ft.colors.BLUE, color=ft.colors.WHITE)),
                padding=ft.padding.only(top=20, bottom=10)
            ),

            ft.Row([
                ft.Container(
                    content=result,
                    padding=15,
                    border_radius=8,
                    border=ft.border.all(1, ft.colors.GREY_300),
                    bgcolor=ft.colors.WHITE,
                    expand=1
                ),
                ft.Container(
                    content=image,
                    padding=10,
                    expand=0
                )
            ], alignment=ft.MainAxisAlignment.CENTER)
        ], width=600, alignment=ft.MainAxisAlignment.CENTER)
    )

ft.app(target=main)

